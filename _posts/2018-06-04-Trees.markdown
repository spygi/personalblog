---
title: "Data structures: Tree special"
layout: post
date: 2018-06-04
categories: theoretical-cs
tags: self-study
---
[1]: https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X "Cracking the coding interview (5th edition)"
[2]: https://www.amazon.com/Elements-Programming-Interviews-Java-Insiders/dp/1517671272/ref=pd_sim_14_3?_encoding=UTF8&pd_rd_i=1517671272&pd_rd_r=XEQKDVEBYF5DAWEC6B7W&pd_rd_w=8RwvQ&pd_rd_wg=L59s8&psc=1&refRID=XEQKDVEBYF5DAWEC6B7W&dpID=51EjkypFE0L&preST=_SY291_BO1,204,203,200_QL40_&dpSrc=detail "Elements of Programming Interviews (in Java)"

A special section on trees/heaps/graphs because these are the data structures I have used the least professionally. Find the introduction on data structures [here]({{ site.baseurl }}{% post_url 2018-06-04-Interview-prep-intro:-Data-structures-and-complexity %}).


## From graphs..
Graphs can be implemented in three ways says Google. These are [objects and pointers](https://stackoverflow.com/a/5887363/2259743), adjacency list and matrix.

There are of course other ways too like [edge list](https://stackoverflow.com/questions/3287003/three-ways-to-store-a-graph-in-memory-advantages-and-disadvantages)
, [incidence matrix?](https://en.wikipedia.org/wiki/Graph_%28abstract_data_type%29#Representations) or [this pointer-hell](https://stackoverflow.com/questions/5493474/graph-implementation-c/5493656#5493656)

 Analysis is done based on edges and vertices (instead of just n)

### Analysis
[From](https://dzone.com/articles/algorithm-week-graphs-and)

| Operation |Add/delete edge | Are i-j connected | Are i-j connected | Find successors of i |
|----|-||||
| 2-D Matrix |O(1)|O(1)|O(n^2)|O(n)|
| List of vertices to vertices | logn |logn|O(|V|+|E|) for DFS|O(k): k being the list of successors|

Space analysis: for sparse graphs
TODO complete with Nutshell and wiki

## ..to trees
Trees are special cases of graphs: undirected graph that is connected but has no cycles [2]. Terminology on trees is not universally agreed upon. Here I follow [2]'s names.

We are mostly interested in binary trees: formally, a binary tree is either empty or a root with a left and right binary tree. Less formally, each node has at most two children (a special case of k-ary tree for k=2).

+ Depth of root is 0. Height of the tree is the maximum depth of any node. A level consists of nodes on the same depth. A leaf is a node with no children (or descendants).
+ Every node has a unique parent (except the root). The path to a node from the root is unique as well.
+ Full binary tree: every node beside the leaves has 2 children.
+ Perfect: a full tree in which all leaves are at the same depth
+ Complete: every level except possibly the last is completely filled (so every node beside the leaves has 2 children=full tree??) and all nodes are as far left as possible.
+ Balanced: a tree which for every node, the height of the left and right subtrees differ at most by 1. A perfect or complete tree is balanced but not vice versa. The height of a balanced binary tree is logn (which is also the minimum height a tree can take)

Contains reference to parent or not?


## ..to special trees
+ Heap: a complete binary tree that fulfils the heap property: every node is >= then its children. Due to the complete-ness, it can be implemented as an array (left child if it exists is 2n and right 2n+1).
+ Binary *search* tree: a binary tree (not complete!) where every node is greater than or equal to the left subtree (not just child) and the less than or equal to the right subtree.
+ B-tree: a BST with more than 2 children
+ Red-black and AVL: self-balanced BSTs
  + Balancing a tree is probably off limits for an interview<sup>[1]</sup> but checking for balance is a legit problem.
+ Trie: a n-ary tree that stores characters
   + [Suffix tree](https://www.geeksforgeeks.org/pattern-searching-set-8-suffix-tree-introduction/) is a compressed trie
     + Check solution of 18.8 on how to construct one.
     + [Video](https://www.youtube.com/watch?v=UrmjCSM7wDw) on how to use one.


## Traversals
+ BFS: uses a queue, iteratively or recursively (to print per layer)
  + Good for optimization problems (find shortest path) or you are ready to quit if you go far from the root.
  + Dijkstra is like BFS for a weighted graph.
    + [In fact](https://cs.stackexchange.com/a/10048/89670) it can be implemented with a priority queue BFS.
+ DFS: 3 types depending by when the root/current node is processed
  + In-order: left tree - node - right tree
  + Pre-order: node - left - right, this is what people refer to usually when they say DFS.
  + Post-order: left - right - node
  + Recursive implementations are the easiest


### Graphs in real Life
- Garbage collection algorithms ([mark 'n' sweep](https://www.geeksforgeeks.org/mark-and-sweep-garbage-collection-algorithm/)) do a graph traversal on the mark part.
- Deadlock detection see 18.4 in [2]


### Just for reference
+ Dijkstra and Bellman-Ford are single source shortest path
  + A* is like [Dijkstra with heuristics](https://stackoverflow.com/questions/13031462/difference-and-advantages-between-dijkstra-a-star) (when you have more information about the graph)
    + An ([admissible](https://en.wikipedia.org/wiki/Admissible_heuristic)) heuristic can be the Hamming or Manhattan distance of the graph.
+ Floyd-Warshall is for all pairs
+ Prim's and Kruskal's are for constructing a MST (minimum spanning tree)


## Groups of problems
Easy:
- You are given a tree or graph structure: check balance (4.1 in [1]), connectivity of nodes (4.2 in [1]), check BST property (4.5 in [1]), sum (leetcode 112 or Ctci 4.9),
- Construct a tree from data structure e.g. 4.3 in [1]

Hard:
- Model a problem as a tree/graph e.g. the map in 18.10 [1] is an adjacency list (Vertices are strings, edges are the key-value association (with direction))


## Resources
  - Cracking the Coding interview<sup>[1]</sup> and the accompanying repo
  - Elements of Programming Interviews in Java<sup>[2]</sup> and the repo
  - Algorithms in a Nutshell
